apiVersion: apps/v1
kind: Deployment
metadata:
  name: clienttwo
  namespace: clienttwo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: clienttwo
  template:
    metadata:
      labels:
        app: clienttwo
        type: agent
      annotations:
        "linkerd.io/inject" : enabled
    spec:
      # nodeSelector:
      #   kubernetes.io/hostname: clienttwo
      # nodeName: clienttwo
      serviceAccountName: job-creator-clienttwo
      containers:
      - name: clienttwo
        image: {{ .Values.dockerArtifactAccount }}/agent:{{ .Values.branchNameTag }}
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
        env:
        - name: DATA_STEWARD_NAME
          value: clienttwo
        - name: OC_AGENT_HOST
          value: {{ .Values.tracingEndpoint }}
      - name: sidecar
        image: {{ .Values.dockerArtifactAccount }}/sidecar:{{ .Values.branchNameTag }}
        imagePullPolicy: Always
        env:
        - name: AMQ_PASSWORD
          valueFrom:
            secretKeyRef:
              name: rabbit
              key: password
        - name: AMQ_USER
          value: normal_user
        - name: OC_AGENT_HOST
          value: {{ .Values.tracingEndpoint }}

---

apiVersion: v1
kind: Service
metadata:
  name: clienttwo
  namespace: clienttwo
spec:
  selector:
    app: clienttwo
    type: agent
  ports:
    - name: http-clienttwo-api
      protocol: TCP
      port: 8080
      targetPort: 8080
  type: ClusterIP

---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: clienttwo-ingress
  namespace: clienttwo
  annotations:
    nginx.ingress.kubernetes.io/service-upstream: "true"
spec:
  ingressClassName: nginx
  rules:
  - host: clienttwo.clienttwo.svc.cluster.local
    http:
      paths:
      - pathType: Prefix
        path: "/agent/v1/vflTrainRequest/clienttwo"
        backend:
          service:
            name: clienttwo
            port:
              number: 8080

---

apiVersion: v1
kind: PersistentVolume
metadata:
  name: clienttwo-pv
spec:
  capacity:
    storage: 10Gi
  storageClassName: standard
  accessModes:
    - ReadWriteMany
  hostPath:
      # local path on node
    path: "/mnt/data"
  persistentVolumeReclaimPolicy: Retain
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: kubernetes.io/hostname
              operator: In
              values:
                - clienttwo

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: clienttwo-pvc
  namespace: clienttwo
spec:
  volumeName: clienttwo-pv
  accessModes:
    - ReadWriteOnce   # Needed for multiple pods to mount simultaneously
  resources:
    requests:
      storage: 5Gi    # Adjust size as needed
  storageClassName: standard
